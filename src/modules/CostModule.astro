---
import CostInput from "@/components/cost/CostInput.astro";
import ModuleContainer from "@/components/ModuleContainer.astro";
import CostCurrencyButton from "@/components/cost/CostCurrencyButton.astro";
import CostPeriodButton from "@/components/cost/CostPeriodButton.astro";
import CostAdditionalItem from "@/components/cost/CostAdditionalItem.astro";

import { getLangFromUrl, useTranslations } from "@/i18n/utils.ts";
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<ModuleContainer title={t("cost.title")} subtitle={t("cost.subtitle")} id="cost">
  <div class="flex flex-col align-center max-w-540 js-cost" >
    <div class="flex justify-center gap-9">
      <CostPeriodButton id="month">{t("cost.tabs.month")}</CostPeriodButton>
      <CostPeriodButton id="year">{t("cost.tabs.year")}</CostPeriodButton>
    </div>

    <div class="bg-white px-10 py-6 rounded-32 shadow-normal">
      <div class="flex flex-row gap-4 justify-center pb-4">
        <CostCurrencyButton id="byn">BYN</CostCurrencyButton>
        <CostCurrencyButton id="usd">$</CostCurrencyButton>
        <CostCurrencyButton id="rub">RUB</CostCurrencyButton>
      </div>
      <label
        for="js-cost-subscribers"
        class="font-bold w-full flex justify-center pb-6"
        >{t("cost.mainLabel")}</label
      >
      <div class="flex justify-between w-full gap-3">
        <CostInput id="js-cost-subscribers"
          >{t("cost.subscribersLabel")}</CostInput
        >
        <CostInput id="js-cost-sum" active>{t("cost.priceLabel")}</CostInput>
      </div>
      <div class="cost__range pt-9">
        <input
          class="range"
          type="range"
          min="0"
          max="1400000"
          step="5000"
          value="5000"
        />
      </div>
      <p class="text-lg text-blue pt-8 font-bold text-center">
        {t("cost.additionalTitle")}
      </p>
      <ul class="flex flex-col gap-6 mt-9">
        <CostAdditionalItem
          id="js-cost-additional-fortune-price"
          type="fortune"
          ending={t('costCurrencySuffix')}
        >
          {t("cost.additional.fortune")}
        </CostAdditionalItem>

        <CostAdditionalItem
          id="js-cost-additional-shop-price"
          type="shop"
          ending={t('costCurrencySuffix')}
        >
          {t("cost.additional.shop")}
        </CostAdditionalItem>

        <CostAdditionalItem
          id="js-cost-additional-full-work-price"
          type="full-work"
        >
          {t("cost.additional.fullWork")}
        </CostAdditionalItem>

        <CostAdditionalItem
          id="js-cost-additional-full-support-price"
          type="full-support"
        >
          {t("cost.additional.fullSupport")}
        </CostAdditionalItem>
      </ul>
      <p class="text-grey-light text-center pt-6 text-m font-semibold">
        {t("cost.additional.ending")}
      </p>
    </div>
  </div>
  <script>
    const getCurrencyRates = () =>
      fetch("https://igame.by/api/payment/rates", { method: "GET" })
        .then((res) => res.text())
        .then(JSON.parse)
        .then(({ rub, byn }) => ({
          rub: Number(rub),
          byn: Number(byn),
          usd: 1,
        }))
        .catch(() => ({
          rub: 0,
          byn: 0,
          usd: 1,
        }));

    const costModules = document.querySelectorAll(".cost");
    const DEFAULT_VALUE = 5_000;
    const BORDER_VALUE = 1_000_000;

    const ADDITIONAL_POINTS = {
      FORTUNE_WHEEL: "FORTUNE_WHEEL",
      SHOP: "SHOP",
      FULL_WORK: "FULL_WORK",
      FULL_SUPPORT: "FULL_SUPPORT",
    };

    const ADDITIONAL_POINTS_PRICES = {
      [ADDITIONAL_POINTS.FORTUNE_WHEEL]: 70,
      [ADDITIONAL_POINTS.SHOP]: 30,
      [ADDITIONAL_POINTS.FULL_WORK]: 99,
      [ADDITIONAL_POINTS.FULL_SUPPORT]: 599,
    };

    const ADDITIONAL_POINTS_WITH_DISCOUNT = [
      ADDITIONAL_POINTS.FORTUNE_WHEEL,
      ADDITIONAL_POINTS.SHOP,
    ];
    const ADDITIONAL_PRICE_SELECTORS = {
      [ADDITIONAL_POINTS.FORTUNE_WHEEL]: "#js-cost-additional-fortune-price",
      [ADDITIONAL_POINTS.SHOP]: "#js-cost-additional-shop-price",
      [ADDITIONAL_POINTS.FULL_WORK]: "#js-cost-additional-full-work-price",
      [ADDITIONAL_POINTS.FULL_SUPPORT]:
        "#js-cost-additional-full-support-price",
    };

    const businessValues = {
      1: BORDER_VALUE,
      2: 2_000_000,
      3: 3_000_000,
      4: 4_000_000,
      5: 5_000_000,
      6: 6_000_000,
      7: 7_000_000,
      8: 8_000_000,
      9: 9_000_000,
      10: 10_000_000,
    };

    const rangeValues = {
      1: BORDER_VALUE,
      2: 1_044_000,
      3: 1_088_000,
      4: 1_132_000,
      5: 1_176_000,
      6: 1_220_000,
      7: 1_264_000,
      8: 1_308_000,
      9: 1_352_000,
      10: 1_400_000,
    };
    const keys = Object.keys(businessValues);

    const businessValueToRangeValue = (value) => {
      return BORDER_VALUE + (value - BORDER_VALUE) / (9_000_000 / 400_000);
    };

    const currencySymbol = {
      usd: "$",
      byn: "BYN",
      rub: "RUB",
    };

    const divideNumberByPieces = (sum, delimiter) => {
      return sum.toString().replace(/\B(?=(\d{3})+(?!\d))/g, delimiter || ".");
    };

    const calculation = (subscribers, cost) => {
      let total = 0;

      if (subscribers <= 5000) {
        total = 10;
      } else if (subscribers > 5000 && subscribers <= 15000) {
        total = 10 + Math.floor((subscribers - 1) / 5000) * 5;
      } else if (subscribers > 15000 && subscribers <= 100000) {
        total = 20 + Math.floor((subscribers - 1) / 10000) * 5;
      } else if (subscribers > 100000) {
        total = 65 + Math.floor((subscribers - 1) / 100000) * 5;
      }

      total = Math.round(total * cost);
      return total;
    };

    const getElements = (module) => [
      module.querySelectorAll(".js-currency-button"),
      module.querySelectorAll(".js-cost-heading-btn"),
      module.querySelector('input[type="range"]'),
      module.querySelector("#js-cost-subscribers"),
      module.querySelector("#js-cost-sum"),
      Object.entries(ADDITIONAL_PRICE_SELECTORS).reduce((acc, [key, value]) => {
        acc[key] = module.querySelector(value);
        return acc;
      }, {}),
    ];

    const changeCurrencyBtnStyle = (btns, selectedCurrency) =>
      btns.forEach((btn) => {
        if (btn.id === selectedCurrency) {
          btn.setAttribute("aria-checked", true);
        } else {
          btn.removeAttribute("aria-checked");
        }
      });

    const changePerionBtnStyle = (btn, selectedPeriod) =>
      btn.forEach((btn) => {
        if (btn.id === selectedPeriod) {
          btn.setAttribute("aria-checked", true);
        } else {
          btn.removeAttribute("aria-checked");
        }
      });

    const normalizeSubscribersValue = (value) => +value.replace(/[^0-9]/g, "");

    const costLogic = async () => {
      const subscriberCost = await getCurrencyRates();
      const changeAdditionalPrices = (
        additionalPrices,
        currency,
        selectedPeriod = "year"
      ) => {
        Object.entries(additionalPrices).forEach(([key, node]) => {
          const calculatedCost =
            ADDITIONAL_POINTS_PRICES[key] *
            Math.floor(subscriberCost[currency]);
          const sum =
            selectedPeriod === "year" &&
            ADDITIONAL_POINTS_WITH_DISCOUNT.includes(key)
              ? Math.round(calculatedCost * 0.8)
              : calculatedCost;

          node.innerText = `${sum} ${currencySymbol[currency]}`;
        });
      };

      const [
        currencyButtons,
        periodButtons,
        range,
        subscribersInput,
        costInput,
        additionalPrices,
      ] = getElements(document.querySelector(".js-cost"));

      let selectedCurrency = "usd";
      let selectedPeriod = "year";

      const setSelectedCurrency = (value) => (selectedCurrency = value);

      const setSelectedPeriod = (value) => (selectedPeriod = value);

      const calculateCost = (value) => {
        const calculatedCost = calculation(
          value,
          subscriberCost[selectedCurrency]
        );
        const sum =
          selectedPeriod === "year"
            ? Math.round(calculatedCost * 0.8)
            : calculatedCost;
        return sum + " " + currencySymbol[selectedCurrency];
      };

      const changeCost = (value) => (costInput.value = calculateCost(value));

      const recalculate = () =>
        changeCost(normalizeSubscribersValue(subscribersInput.value));

      const changeSubscribers = (value) =>
        (subscribersInput.value = divideNumberByPieces(value));

      const setRangeValue = (value) => (range.value = value);

      const handleSubscribersInputChange = (value) => {
        changeSubscribers(value || 0);
        changeCost(value);

        if (value < BORDER_VALUE) {
          setRangeValue(value);
          return;
        }

        if (value >= businessValues[10]) {
          setRangeValue(rangeValues[10]);
          return;
        }

        setRangeValue(businessValueToRangeValue(value));
      };

      const handleRangeChange = (value) => {
        if (value === "0") {
          setRangeValue(1);
          changeSubscribers(1);
          changeCost(1);
          return;
        }

        if (value <= BORDER_VALUE) {
          setRangeValue(value);
          changeSubscribers(value);
          changeCost(value);
          return;
        }

        if (value >= rangeValues[10]) {
          setRangeValue(rangeValues[10]);
          changeSubscribers(businessValues[10]);
          changeCost(businessValues[10]);
          return;
        }

        keys.forEach((key) => {
          if (value > rangeValues[key - 1] && value < rangeValues[key]) {
            setRangeValue(rangeValues[key]);
            changeSubscribers(businessValues[key]);
            changeCost(businessValues[key]);
          }
        });
      };

      const subscribersHandler = ({ target: { value } }) =>
        handleSubscribersInputChange(normalizeSubscribersValue(value));

      subscribersInput.addEventListener("input", subscribersHandler);

      const rangeHandler = ({ target: { value } }) => handleRangeChange(value);
      range.addEventListener("input", rangeHandler);

      currencyButtons.forEach((btn) => {
        const { id } = btn;

        const handleChangeCurrency = () => {
          changeCurrencyBtnStyle(currencyButtons, id);
          setSelectedCurrency(id);
          recalculate();
          changeAdditionalPrices(additionalPrices, selectedCurrency);
        };

        btn.addEventListener("click", handleChangeCurrency);
      });

      periodButtons.forEach((btn) => {
        const { id } = btn;

        const btnHandler = () => {
          changePerionBtnStyle(periodButtons, id);
          setSelectedPeriod(id);
          recalculate();
          changeAdditionalPrices(additionalPrices, selectedCurrency, id);
        };

        btn.addEventListener("click", btnHandler);
      });

      const init = () => {
        changeCurrencyBtnStyle(currencyButtons, selectedCurrency);
        changePerionBtnStyle(periodButtons, selectedPeriod);
        handleRangeChange(DEFAULT_VALUE);
        changeAdditionalPrices(additionalPrices, selectedCurrency);
      };

      init();
    };

    costLogic();
  </script>
</ModuleContainer>
